{"version":3,"sources":["views/Pool2/index.tsx","utils/currencyId3.ts","hooks/useTotalSupply3.ts","components/PositionCard3/index.tsx","components/App/Settings/SettingsModal3.tsx","components/App/Settings/index3.tsx","components/App/Transactions3/Transaction.tsx","components/App/Transactions3/TransactionsModal.tsx","components/App/Transactions3/index.tsx","components/App/AppHeader3.tsx"],"names":["Body","styled","CardBody","theme","colors","dropdownDeep","StyledNav","nav","Pool2","pathname","account","useActiveWeb3React","t","useTranslation","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","title","subtitle","color","textAlign","index","pair","mb","flexDirection","alignItems","mt","id","variant","scale","as","Link","to","style","width","startIcon","activeIndex","location","includes","currencyId","currency","ETHER","Token","Error","useTotalSupply","token","contract","useTokenContract","totalSupply","useSingleCallResult","result","TokenAmount","toString","FixedHeightRow","RowBetween","MinimalPositionCard","showUnwrapped","currency0","token0","unwrappedToken","currency1","token1","useState","showMore","setShowMore","userPoolBalance","useTokenBalance","totalPoolTokens","poolTokenPercentage","JSBI","greaterThanOrEqual","raw","Percent","getLiquidityValue","token0Deposited","token1Deposited","BigInt","gap","bold","onClick","margin","size","small","symbol","toSignificant","toFixed","asset","ml","fontSize","role","FullPositionCard","props","borderRadius","justifyContent","p","padding","BIG_INT_ZERO","SettingsModal","onDismiss","showConfirmExpertModal","setShowConfirmExpertModal","useUserSlippageTolerance","userSlippageTolerance","setUserslippageTolerance","useUserTransactionTTL","ttl","setTtl","useExpertModeManager","expertMode","toggleExpertMode","useUserSingleHopOnly","singleHopOnly","setSingleHopOnly","useAudioModeManager","onChangeRecipient","useSwapActionHandlers","onBack","maxWidth","window","prompt","TransactionSettings","rawSlippage","setRawSlippage","deadline","setDeadline","Row","QuestionHelper","text","checked","onChange","SettingsTab","useModal","onPresentSettingsModal","show","TransactionState","div","primary","IconWrapper","pending","success","failure","Transaction","tx","chainId","summary","receipt","status","href","getBscScanLink","hash","CircleLoader","newTransactionsFirst","a","b","addedTime","renderTransactions","transactions","TransactionsModal","dispatch","useDispatch","allTransactions","useAllTransactions","sortedRecentTransactions","Object","values","isTransactionRecent","sort","confirmed","clearAllTransactionsCallback","useCallback","clearAllTransactions","Transactions","onPresentTransactionsModal","AppHeaderContainer","Flex","cardBorder","AppHeader","helper","backTo","noConfig","mr"],"mappings":"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","file":"static/js/17.e8a59e10.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Pair } from '@pancakeswap2/sdk'\nimport { Text, Flex, CardBody, CardFooter, Button, AddIcon , ButtonMenu, ButtonMenuItem} from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport FullPositionCard from '../../components/PositionCard3'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks3'\nimport { usePairs } from '../../hooks/usePairs3'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks/index3'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App/index3'\nimport Page from '../Page2'\n\nconst Body = styled(CardBody)`\n  background-color: ${({ theme }) => theme.colors.dropdownDeep};\n`\nconst StyledNav = styled.nav`\n  margin-top: 40px;\n`\n\nexport default function Pool2() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs],\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens],\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens,\n  )\n  const getActiveIndex = (pathname: string): number => {\n    if (\n      pathname.includes('/pool2') ||\n      pathname.includes('/createape') ||\n      pathname.includes('/addapeliquidity') ||\n      pathname.includes('/removeape') ||\n      pathname.includes('/apefind') ||\n      pathname.includes('/apeliquidity')\n    ) {\n      return 1\n    }\n    return 0\n  }\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  const renderBody = () => {\n    if (!account) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          {t('Connect to a wallet to view your liquidity.')}\n        </Text>\n      )\n    }\n    if (v2IsLoading) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          <Dots>{t('Loading')}</Dots>\n        </Text>\n      )\n    }\n    if (allV2PairsWithLiquidity?.length > 0) {\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\n        <FullPositionCard\n          key={v2Pair.liquidityToken.address}\n          pair={v2Pair}\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\n        />\n      ))\n    }\n    return (\n      <Text color=\"textSubtle\" textAlign=\"center\">\n        {t('No liquidity found.')}\n      </Text>\n    )\n  }\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title={t('Your Liquidity')} subtitle={t('Remove liquidity to receive tokens back')} />\n        <Body>\n          {renderBody()}\n          {account && !v2IsLoading && (\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"24px\">\n              <Text color=\"textSubtle\" mb=\"8px\">\n                {t(\"Don't see a pool you joined?\")}\n              </Text>\n              <Button id=\"import-pool-link\" variant=\"secondary\" scale=\"sm\" as={Link} to=\"/apefind\">\n                {t('Find other LP tokens')}\n              </Button>\n            </Flex>\n          )}\n        </Body>\n        <CardFooter style={{ textAlign: 'center' }}>\n          <Button id=\"join-pool-button\" as={Link} to=\"/addapeliquidity\" width=\"100%\" startIcon={<AddIcon color=\"white\" />}>\n            {t('Add Liquidity')}\n          </Button>\n        </CardFooter>\n      </AppBody>\n      <StyledNav>\n      <ButtonMenu activeIndex={getActiveIndex(location.pathname)} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem id=\"swap-nav-link\" to=\"/liquidity\" as={Link}>\n          {t('PancakeSwap')}\n        </ButtonMenuItem>\n        <ButtonMenuItem id=\"pool-nav-link\" to=\"/apeliquidity\" as={Link}>\n          {t('ApeSwap')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n      </StyledNav>\n    </Page>\n    \n  )\n}\n","import { Currency, ETHER, Token } from '@pancakeswap2/sdk'\n\nexport function currencyId(currency: Currency): string {\n  if (currency === ETHER) return 'BNB'\n  if (currency instanceof Token) return currency.address\n  throw new Error('invalid currency')\n}\n\nexport default currencyId\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Token, TokenAmount } from '@pancakeswap2/sdk'\nimport { useTokenContract } from './useContract3'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nfunction useTotalSupply(token?: Token): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\n\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\n}\n\nexport default useTotalSupply\n","import React, { useState } from 'react'\nimport { JSBI, Pair, Percent } from '@pancakeswap2/sdk'\nimport {\n  Button,\n  Text,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Card,\n  CardBody,\n  Flex,\n  CardProps,\n  AddIcon,\n} from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTotalSupply from '../../hooks/useTotalSupply3'\n\nimport { useTokenBalance } from '../../state/wallet/hooks3'\nimport { currencyId } from '../../utils/currencyId3'\nimport { unwrappedToken } from '../../utils/wrappedCurrency3'\n\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Layout/Column'\nimport CurrencyLogo from '../Logo/CurrencyLogo2'\nimport { DoubleCurrencyLogo } from '../Logo/index2'\nimport { RowBetween, RowFixed } from '../Layout/Row'\nimport { BIG_INT_ZERO } from '../../config/constants/index3'\nimport Dots from '../Loader/Dots'\n\nconst FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\ninterface PositionCardProps extends CardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n}\n\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <>\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, JSBI.BigInt(0)) ? (\n        <Card>\n          <CardBody>\n            <AutoColumn gap=\"16px\">\n              <FixedHeightRow>\n                <RowFixed>\n                  <Text color=\"secondary\" bold>\n                    {t('LP tokens in your wallet')}\n                  </Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\n                  <Text small color=\"textSubtle\">\n                    {currency0.symbol}-{currency1.symbol} LP\n                  </Text>\n                </RowFixed>\n                <RowFixed>\n                  <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <AutoColumn gap=\"4px\">\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Share of Pool')}:\n                  </Text>\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency0.symbol })}:\n                  </Text>\n                  {token0Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency1.symbol })}:\n                  </Text>\n                  {token1Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n              </AutoColumn>\n            </AutoColumn>\n          </CardBody>\n        </Card>\n      ) : (\n        <LightCard>\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"pancake-icon\">\n              🥞\n            </span>{' '}\n            {t(\n              \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\",\n            )}\n          </Text>\n        </LightCard>\n      )}\n    </>\n  )\n}\n\nexport default function FullPositionCard({ pair, ...props }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const currency0 = unwrappedToken(pair.token0)\n  const currency1 = unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <Card style={{ borderRadius: '12px' }} {...props}>\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mb=\"4px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text bold ml=\"8px\">\n              {!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}\n            </Text>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {userPoolBalance?.toSignificant(4)}\n          </Text>\n        </Flex>\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\n      </Flex>\n\n      {showMore && (\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency0} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency0.symbol}\n              </Text>\n            </RowFixed>\n            {token0Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency1} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency1.symbol}\n              </Text>\n            </RowFixed>\n            {token1Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <Text color=\"textSubtle\">Share of pool</Text>\n            <Text>\n              {poolTokenPercentage\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\n                : '-'}\n            </Text>\n          </FixedHeightRow>\n\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, BIG_INT_ZERO) && (\n            <Flex flexDirection=\"column\">\n              <Button\n                as={Link}\n                to={`/removeape/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                Remove\n              </Button>\n              <Button\n                as={Link}\n                to={`/addapeliquidity/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"text\"\n                startIcon={<AddIcon color=\"primary\" />}\n                width=\"100%\"\n              >\n                Add liquidity instead\n              </Button>\n            </Flex>\n          )}\n        </AutoColumn>\n      )}\n    </Card>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button, Text, PancakeToggle, Flex, Message, Modal, ModalBody, InjectedModalProps } from '@pancakeswap/uikit'\nimport {\n  useAudioModeManager,\n  useExpertModeManager,\n  useUserTransactionTTL,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n} from 'state/user/hooks/index3'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { useSwapActionHandlers } from 'state/swap/hooks3'\nimport { AutoColumn } from '../../Layout/Column'\nimport QuestionHelper from '../../QuestionHelper'\nimport { RowBetween, RowFixed } from '../../Layout/Row'\nimport TransactionSettings from './TransactionSettings'\n\nconst SettingsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false)\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\n  const [ttl, setTtl] = useUserTransactionTTL()\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n  const { onChangeRecipient } = useSwapActionHandlers()\n\n  const { t } = useTranslation()\n\n  if (showConfirmExpertModal) {\n    return (\n      <Modal\n        title={t('Are you sure?')}\n        onBack={() => setShowConfirmExpertModal(false)}\n        onDismiss={onDismiss}\n        style={{ maxWidth: '420px' }}\n      >\n        <ModalBody>\n          <Message variant=\"warning\" mb=\"24px\">\n            <Text>\n              {t(\n                \"Expert mode turns off the 'Confirm' transaction prompt, and allows high slippage trades that often result in bad rates and lost funds.\",\n              )}\n            </Text>\n          </Message>\n          <Text mb=\"24px\">{t('Only use this mode if you know what you’re doing.')}</Text>\n          <Button\n            variant=\"danger\"\n            id=\"confirm-expert-mode\"\n            onClick={() => {\n              // eslint-disable-next-line no-alert\n              if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\n                toggleExpertMode()\n                setShowConfirmExpertModal(false)\n              }\n            }}\n          >\n            {t('Turn On Expert Mode')}\n          </Button>\n        </ModalBody>\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal title={t('Settings')}  onDismiss={onDismiss}>\n      <ModalBody>\n        <AutoColumn gap=\"md\" style={{ padding: '1rem' }}>\n          <Text bold fontSize=\"20px\">\n            {t('Transaction Settings')}\n          </Text>\n          <TransactionSettings\n            rawSlippage={userSlippageTolerance}\n            setRawSlippage={setUserslippageTolerance}\n            deadline={ttl}\n            setDeadline={setTtl}\n          />\n          <Text bold fontSize=\"20px\" mt=\"32px\">\n            {t('Interface Settings')}\n          </Text>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Toggle Expert Mode')}</Text>\n              <QuestionHelper\n                text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')}\n                ml=\"4px\"\n              />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-expert-mode-button\"\n              checked={expertMode}\n              onChange={\n                expertMode\n                  ? () => {\n                      onChangeRecipient(null)\n                      toggleExpertMode()\n                    }\n                  : () => setShowConfirmExpertModal(true)\n              }\n            />\n          </RowBetween>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Disable Multihops')}</Text>\n              <QuestionHelper text={t('Restricts swaps to direct pairs only.')} ml=\"4px\" />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-disable-multihop-button\"\n              checked={singleHopOnly}\n              onChange={() => {\n                setSingleHopOnly(!singleHopOnly)\n              }}\n            />\n          </RowBetween>\n        </AutoColumn>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n","import React from 'react'\nimport { Button, TuneIcon, NotificationDot, useModal } from '@pancakeswap/uikit'\nimport { useExpertModeManager } from 'state/user/hooks/index3'\nimport SettingsModal from './SettingsModal3'\n\nexport default function SettingsTab() {\n  const [onPresentSettingsModal] = useModal(<SettingsModal />)\n  const [expertMode] = useExpertModeManager()\n\n  return (\n    <NotificationDot show={expertMode}>\n      <Button variant=\"text\" p={0} onClick={onPresentSettingsModal} id=\"open-settings-dialog-button\">\n        <TuneIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </NotificationDot>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkIcon, CloseIcon, LinkExternal } from '@pancakeswap/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils/index3'\nimport { TransactionDetails } from 'state/transactions/reducer3'\nimport CircleLoader from '../../Loader/CircleLoader'\n\nconst TransactionState = styled.div<{ pending: boolean; success?: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-decoration: none !important;\n  border-radius: 0.5rem;\n  padding: 0.25rem 0rem;\n  font-weight: 500;\n  font-size: 0.825rem;\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst IconWrapper = styled.div<{ pending: boolean; success?: boolean }>`\n  color: ${({ pending, success, theme }) =>\n    pending ? theme.colors.primary : success ? theme.colors.success : theme.colors.failure};\n`\n\nexport default function Transaction({ tx }: { tx: TransactionDetails }) {\n  const { chainId } = useActiveWeb3React()\n\n  const summary = tx?.summary\n  const pending = !tx?.receipt\n  const success = !pending && tx && (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined')\n\n  if (!chainId) return null\n\n  return (\n    <TransactionState pending={pending} success={success}>\n      <LinkExternal href={getBscScanLink(tx.hash, 'transaction', chainId)}>{summary ?? tx.hash}</LinkExternal>\n      <IconWrapper pending={pending} success={success}>\n        {pending ? <CircleLoader /> : success ? <CheckmarkIcon color=\"success\" /> : <CloseIcon color=\"failure\" />}\n      </IconWrapper>\n    </TransactionState>\n  )\n}\n","import React, { useMemo, useCallback } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { Modal, ModalBody, Text, Button, Flex, InjectedModalProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks3'\nimport { TransactionDetails } from 'state/transactions/reducer3'\nimport { AppDispatch } from 'state'\nimport { clearAllTransactions } from 'state/transactions/actions3'\nimport { AutoRow } from '../../Layout/Row'\nimport Transaction from './Transaction'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nfunction renderTransactions(transactions: TransactionDetails[]) {\n  return (\n    <Flex flexDirection=\"column\">\n      {transactions.map((tx) => {\n        return <Transaction key={tx.hash + tx.addedTime} tx={tx} />\n      })}\n    </Flex>\n  )\n}\n\nconst TransactionsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const allTransactions = useAllTransactions()\n\n  const { t } = useTranslation()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt)\n  const confirmed = sortedRecentTransactions.filter((tx) => tx.receipt)\n\n  const clearAllTransactionsCallback = useCallback(() => {\n    if (chainId) dispatch(clearAllTransactions({ chainId }))\n  }, [dispatch, chainId])\n\n  return (\n    <Modal title={t('Recent Transactions')}  onDismiss={onDismiss}>\n      {account && (\n        <ModalBody>\n          {!!pending.length || !!confirmed.length ? (\n            <>\n              <AutoRow mb=\"1rem\" style={{ justifyContent: 'space-between' }}>\n                <Text>{t('Recent Transactions')}</Text>\n                <Button variant=\"tertiary\" scale=\"xs\" onClick={clearAllTransactionsCallback}>\n                  {t('clear all')}\n                </Button>\n              </AutoRow>\n              {renderTransactions(pending)}\n              {renderTransactions(confirmed)}\n            </>\n          ) : (\n            <Text>{t('No recent transactions')}</Text>\n          )}\n        </ModalBody>\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionsModal\n","import React from 'react'\nimport { HistoryIcon, Button, useModal } from '@pancakeswap/uikit'\nimport TransactionsModal from './TransactionsModal'\n\nconst Transactions = () => {\n  const [onPresentTransactionsModal] = useModal(<TransactionsModal />)\n  return (\n    <>\n      <Button variant=\"text\" p={0} onClick={onPresentTransactionsModal} ml=\"16px\">\n        <HistoryIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </>\n  )\n}\n\nexport default Transactions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Heading, IconButton, ArrowBackIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport Settings from './Settings/index3'\nimport Transactions from './Transactions3'\nimport QuestionHelper from '../QuestionHelper'\n\ninterface Props {\n  title: string\n  subtitle: string\n  helper?: string\n  backTo?: string\n  noConfig?: boolean\n}\n\nconst AppHeaderContainer = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px;\n  width: 100%;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst AppHeader: React.FC<Props> = ({ title, subtitle, helper, backTo, noConfig = false }) => {\n  return (\n    <AppHeaderContainer>\n      <Flex alignItems=\"center\" mr={noConfig ? 0 : '16px'}>\n        {backTo && (\n          <IconButton as={Link} to={backTo}>\n            <ArrowBackIcon width=\"32px\" />\n          </IconButton>\n        )}\n        <Flex flexDirection=\"column\">\n          <Heading as=\"h2\" mb=\"8px\">\n            {title}\n          </Heading>\n          <Flex alignItems=\"center\">\n            {helper && <QuestionHelper text={helper} mr=\"4px\" />}\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {subtitle}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n      {!noConfig && (\n        <Flex>\n          <Settings />\n          <Transactions />\n        </Flex>\n      )}\n    </AppHeaderContainer>\n  )\n}\n\nexport default AppHeader\n"],"sourceRoot":""}